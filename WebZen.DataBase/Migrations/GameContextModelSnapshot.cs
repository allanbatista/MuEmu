// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MuEmu.Entity;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MU.DataBase.Migrations
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MU.DataBase.AccountDto", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccountId"));

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("AuthToken")
                        .HasMaxLength(33)
                        .HasColumnType("character varying(33)");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("TINYINT(1)");

                    b.Property<DateTime>("LastConnection")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .HasColumnType("text");

                    b.Property<int>("ServerCode")
                        .HasColumnType("integer");

                    b.Property<int>("VaultCount")
                        .HasColumnType("integer");

                    b.Property<int>("VaultMoney")
                        .HasColumnType("integer");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("MU.DataBase.BloodCastleDto", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId");

                    b.ToTable("BloodCastle");
                });

            modelBuilder.Entity("MU.DataBase.CharacterDto", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CharacterId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<short>("Agility")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<short>("Command")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<int>("CtlCode")
                        .HasColumnType("integer");

                    b.Property<short>("Energy")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<byte>("ExpandedInventory")
                        .HasColumnType("smallint");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<int?>("GuildId")
                        .HasColumnType("integer");

                    b.Property<short>("Level")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("LevelUpPoints")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("Life")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("Mana")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("Map")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<int?>("MasterInfoId")
                        .HasColumnType("integer");

                    b.Property<short>("MaxLife")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("MaxMana")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<int>("Money")
                        .HasColumnType("INT(11)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<short>("PKLevel")
                        .HasColumnType("smallint");

                    b.Property<int>("PKTime")
                        .HasColumnType("integer");

                    b.Property<int>("Resets")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.Property<int>("Ruud")
                        .HasColumnType("INT(11)");

                    b.Property<int?>("SkillKeyId")
                        .HasColumnType("integer");

                    b.Property<short>("Str")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("Vitality")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<short>("X")
                        .HasColumnType("smallint");

                    b.Property<short>("Y")
                        .HasColumnType("smallint");

                    b.HasKey("CharacterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("GuildId");

                    b.HasIndex("MasterInfoId");

                    b.HasIndex("SkillKeyId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("MU.DataBase.FavoritesDto", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Fav01")
                        .HasColumnType("integer");

                    b.Property<int>("Fav02")
                        .HasColumnType("integer");

                    b.Property<int>("Fav03")
                        .HasColumnType("integer");

                    b.Property<int>("Fav04")
                        .HasColumnType("integer");

                    b.Property<int>("Fav05")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId");

                    b.ToTable("FavoritesList");
                });

            modelBuilder.Entity("MU.DataBase.FriendDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("FriendId")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("FriendId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("MU.DataBase.GensDto", b =>
                {
                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<int>("Contribution")
                        .HasColumnType("integer");

                    b.Property<int>("Influence")
                        .HasColumnType("integer");

                    b.Property<int>("Ranking")
                        .HasColumnType("integer");

                    b.HasKey("CharacterId");

                    b.ToTable("Gens");
                });

            modelBuilder.Entity("MU.DataBase.GremoryCaseDto", b =>
                {
                    b.Property<long>("GiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GiftId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Auth")
                        .HasColumnType("bigint");

                    b.Property<int?>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<byte>("Durability")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("HarmonyOption")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<byte>("Inventory")
                        .HasColumnType("smallint");

                    b.Property<int>("ItemNumber")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.Property<bool>("Luck")
                        .HasColumnType("TINYINT(1)");

                    b.Property<byte>("Option")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<byte>("OptionExe")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<byte>("Plus")
                        .HasColumnType("smallint");

                    b.Property<bool>("Skill")
                        .HasColumnType("TINYINT(1)");

                    b.Property<string>("SocketOptions")
                        .HasColumnType("text");

                    b.Property<byte>("Source")
                        .HasColumnType("smallint");

                    b.HasKey("GiftId");

                    b.HasIndex("AccountId");

                    b.ToTable("GremoryCase");
                });

            modelBuilder.Entity("MU.DataBase.GuildDto", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuildId"));

                    b.Property<int?>("AllianceId")
                        .HasColumnType("integer");

                    b.Property<byte>("GuildType")
                        .HasColumnType("smallint");

                    b.Property<byte[]>("Mark")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Rival1")
                        .HasColumnType("integer");

                    b.Property<int?>("Rival2")
                        .HasColumnType("integer");

                    b.Property<int?>("Rival3")
                        .HasColumnType("integer");

                    b.Property<int?>("Rival4")
                        .HasColumnType("integer");

                    b.Property<int?>("Rival5")
                        .HasColumnType("integer");

                    b.HasKey("GuildId");

                    b.ToTable("Guild");
                });

            modelBuilder.Entity("MU.DataBase.GuildMatchingDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("Class")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<short>("InterestType")
                        .HasColumnType("smallint");

                    b.Property<short>("LevelRange")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildMatching");
                });

            modelBuilder.Entity("MU.DataBase.GuildMatchingJoinDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("GuildMatchingId")
                        .HasColumnType("integer");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GuildMatchingId");

                    b.ToTable("GuildMatchingJoin");
                });

            modelBuilder.Entity("MU.DataBase.GuildMemberDto", b =>
                {
                    b.Property<int>("MembId")
                        .HasColumnType("integer");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasKey("MembId");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildMember");
                });

            modelBuilder.Entity("MU.DataBase.HuntingDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AttackPVM")
                        .HasColumnType("bigint");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<long>("ElementalAttackPVM")
                        .HasColumnType("bigint");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<float>("HealingUse")
                        .HasColumnType("real");

                    b.Property<int>("KilledMonsters")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.Property<int>("Map")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Hunting");
                });

            modelBuilder.Entity("MU.DataBase.ItemDto", b =>
                {
                    b.Property<long>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT(5)");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ItemId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("Durability")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<byte>("HarmonyOption")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<bool>("Luck")
                        .HasColumnType("TINYINT(1)");

                    b.Property<int>("Number")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.Property<byte>("Option")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<byte>("OptionExe")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<string>("PJewels")
                        .HasColumnType("text");

                    b.Property<long>("PetEXP")
                        .HasColumnType("BIGINT(5)");

                    b.Property<byte>("PetLevel")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.Property<byte>("Plus")
                        .HasColumnType("smallint");

                    b.Property<byte>("SetOption")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<bool>("Skill")
                        .HasColumnType("TINYINT(1)");

                    b.Property<int>("SlotId")
                        .HasColumnType("integer");

                    b.Property<byte>("SocketBonus")
                        .HasColumnType("TINYINT(1) UNSIGNED");

                    b.Property<string>("SocketOptions")
                        .HasColumnType("text");

                    b.Property<int>("VaultId")
                        .HasColumnType("integer");

                    b.HasKey("ItemId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("MU.DataBase.MasterInfoDto", b =>
                {
                    b.Property<int>("MasterInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MasterInfoId"));

                    b.Property<long>("Experience")
                        .HasColumnType("BIGINT UNSIGNED");

                    b.Property<int>("Level")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.Property<int>("Points")
                        .HasColumnType("SMALLINT(5) UNSIGNED");

                    b.HasKey("MasterInfoId");

                    b.ToTable("MasterInfo");
                });

            modelBuilder.Entity("MU.DataBase.MemoDto", b =>
                {
                    b.Property<int>("MemoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MemoId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("MemoId");

                    b.HasIndex("SenderId");

                    b.ToTable("Letters");
                });

            modelBuilder.Entity("MU.DataBase.QuestDto", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("Quest")
                        .HasColumnType("integer");

                    b.Property<byte>("State")
                        .HasColumnType("smallint");

                    b.HasKey("QuestId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("MU.DataBase.QuestEXDto", b =>
                {
                    b.Property<int>("QuestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("Quest")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("QuestId");

                    b.HasIndex("CharacterId");

                    b.ToTable("QuestEX");
                });

            modelBuilder.Entity("MU.DataBase.SellDto", b =>
                {
                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<short>("Count")
                        .HasColumnType("SMALLINT(5)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("Item")
                        .HasMaxLength(12)
                        .HasColumnType("bytea");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Index");

                    b.ToTable("Sell");
                });

            modelBuilder.Entity("MU.DataBase.SkillKeyDto", b =>
                {
                    b.Property<int>("SkillKeyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillKeyId"));

                    b.Property<byte>("ChatWindow")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<byte>("EkeyDefine")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<byte>("GameOption")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<long>("QWERLevelDefine")
                        .HasColumnType("bigint");

                    b.Property<byte>("QkeyDefine")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<byte>("RkeyDefine")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.Property<byte[]>("SkillKey")
                        .HasColumnType("bytea");

                    b.Property<byte>("WkeyDefine")
                        .HasColumnType("TINYINT UNSIGNED");

                    b.HasKey("SkillKeyId");

                    b.ToTable("SkillKey");
                });

            modelBuilder.Entity("MU.DataBase.SpellDto", b =>
                {
                    b.Property<int>("SpellId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpellId"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<short>("Magic")
                        .HasColumnType("smallint");

                    b.HasKey("SpellId");

                    b.HasIndex("CharacterId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("MU.DataBase.BloodCastleDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithOne("BloodCastle")
                        .HasForeignKey("MU.DataBase.BloodCastleDto", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.CharacterDto", b =>
                {
                    b.HasOne("MU.DataBase.AccountDto", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MU.DataBase.GuildDto", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");

                    b.HasOne("MU.DataBase.MasterInfoDto", "MasterInfo")
                        .WithMany()
                        .HasForeignKey("MasterInfoId");

                    b.HasOne("MU.DataBase.SkillKeyDto", "SkillKey")
                        .WithMany()
                        .HasForeignKey("SkillKeyId");

                    b.Navigation("Account");

                    b.Navigation("Guild");

                    b.Navigation("MasterInfo");

                    b.Navigation("SkillKey");
                });

            modelBuilder.Entity("MU.DataBase.FavoritesDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithOne("Favorites")
                        .HasForeignKey("MU.DataBase.FavoritesDto", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.FriendDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithMany("Friends")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MU.DataBase.CharacterDto", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("MU.DataBase.GensDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithOne("Gens")
                        .HasForeignKey("MU.DataBase.GensDto", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.GremoryCaseDto", b =>
                {
                    b.HasOne("MU.DataBase.AccountDto", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MU.DataBase.GuildMatchingDto", b =>
                {
                    b.HasOne("MU.DataBase.GuildDto", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("MU.DataBase.GuildMatchingJoinDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MU.DataBase.GuildMatchingDto", "GuildMatching")
                        .WithMany()
                        .HasForeignKey("GuildMatchingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("GuildMatching");
                });

            modelBuilder.Entity("MU.DataBase.GuildMemberDto", b =>
                {
                    b.HasOne("MU.DataBase.GuildDto", "Guild")
                        .WithMany("MembersInfo")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MU.DataBase.CharacterDto", "Memb")
                        .WithOne()
                        .HasForeignKey("MU.DataBase.GuildMemberDto", "MembId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Memb");
                });

            modelBuilder.Entity("MU.DataBase.HuntingDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.MemoDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Sender")
                        .WithMany("Memos")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("MU.DataBase.QuestDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithMany("Quests")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.QuestEXDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithMany("QuestEX")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.SpellDto", b =>
                {
                    b.HasOne("MU.DataBase.CharacterDto", "Character")
                        .WithMany("Spells")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MU.DataBase.AccountDto", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("MU.DataBase.CharacterDto", b =>
                {
                    b.Navigation("BloodCastle");

                    b.Navigation("Favorites");

                    b.Navigation("Friends");

                    b.Navigation("Gens");

                    b.Navigation("Memos");

                    b.Navigation("QuestEX");

                    b.Navigation("Quests");

                    b.Navigation("Spells");
                });

            modelBuilder.Entity("MU.DataBase.GuildDto", b =>
                {
                    b.Navigation("MembersInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
